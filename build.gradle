
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

bootJar.enabled = false

allprojects {
    group = 'com.dove'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    ext {
        set('springCloudVersion', "2025.0.0")
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        runtimeOnly 'com.mysql:mysql-connector-j'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

//def hasBeenTested = new HashSet<String>()

//allprojects { project ->
//    project.tasks.withType(Test).configureEach { testTask ->
//        testTask.onlyIf {
//            def shouldRun = !hasBeenTested.contains(project.path)
//            if (shouldRun) {
//                hasBeenTested.add(project.path)
//            }
//            return shouldRun
//        }
//    }
//}

//gradle.projectsEvaluated {
//    def getProjectDependencies
//    getProjectDependencies = { Project project ->
//        def deps = new HashSet<Project>()
//        project.configurations.implementation.allDependencies.withType(ProjectDependency).each { dep ->
//            def depProject = project.project(":${dep.name}")
//            deps.add(depProject)
//            deps.addAll(getProjectDependencies(depProject))
//        }
//        return deps
//    }
//
//    subprojects { project ->
//        project.tasks.withType(Test).configureEach { testTask ->
//            def allDeps = getProjectDependencies(project)
//            allDeps.each { dep ->
//                testTask.mustRunAfter(dep.tasks.withType(Test))
//            }
//        }
//    }
//}